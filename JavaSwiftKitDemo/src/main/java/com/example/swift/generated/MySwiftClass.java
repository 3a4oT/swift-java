// Generated by jextract-swift
// Swift module: JavaKitExample

package com.example.swift.generated;

import org.swift.javakit.SwiftKit;
import java.lang.foreign.*;
import java.lang.invoke.*;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.nio.charset.StandardCharsets;

  public final class MySwiftClass {
      // Pointer to the referred to class instance's "self".
  private final MemorySegment selfMemorySegment;
  public final MemorySegment $memorySegment() {
    return this.selfMemorySegment;
  }

      /** Instances are created using static {@code init} methods rather than through the constructor directly. */
  private MySwiftClass(MemorySegment selfMemorySegment) {
    this.selfMemorySegment = selfMemorySegment;
  }

      static final String DYLIB_NAME = "JavaKitExample";
  static final Arena LIBRARY_ARENA = Arena.ofAuto();

      // TODO: rather than the C ones offer the Swift mappings
  public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
  public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
  public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
  public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
  public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
  public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
  public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
  public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
          .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, ValueLayout.JAVA_BYTE));
  public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;

    
      public static final ValueLayout.OfBoolean SWIFT_BOOL = ValueLayout.JAVA_BOOLEAN;
  public static final ValueLayout.OfByte SWIFT_INT8 = ValueLayout.JAVA_BYTE;
  public static final ValueLayout.OfChar SWIFT_UINT16 = ValueLayout.JAVA_CHAR;
  public static final ValueLayout.OfShort SWIFT_INT16 = ValueLayout.JAVA_SHORT;
  public static final ValueLayout.OfInt SWIFT_INT32 = ValueLayout.JAVA_INT;
  public static final ValueLayout.OfLong SWIFT_INT64 = ValueLayout.JAVA_LONG;
  public static final ValueLayout.OfFloat SWIFT_FLOAT = ValueLayout.JAVA_FLOAT;
  public static final ValueLayout.OfDouble SWIFT_DOUBLE = ValueLayout.JAVA_DOUBLE;
  public static final AddressLayout SWIFT_POINTER = ValueLayout.ADDRESS;
  // On the platform this was generated on, Int was Int64
  public static final SequenceLayout SWIFT_BYTE_ARRAY = MemoryLayout.sequenceLayout(8, ValueLayout.JAVA_BYTE);
  public static final ValueLayout.OfLong SWIFT_INT = SWIFT_INT64;
  public static final ValueLayout.OfLong SWIFT_UINT = SWIFT_INT64;
  public static final AddressLayout SWIFT_SELF = SWIFT_POINTER;
  public static final AddressLayout SWIFT_TYPE_METADATA_PTR = SWIFT_POINTER;

      private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
    SWIFT_POINTER
  );
  // TODO: depends on @layout in Swift, so we can't do these yet
  private static final GroupLayout $CLASS_LAYOUT = MemoryLayout.structLayout(
    // SWIFT_INT.withName("heapObject"),
    // ...
    // SWIFT_INT.withName("cap")
  ).withName("MySwiftClass"); // TODO: is the name right?
  /**
   * When other types refer to this type, they refer to by a pointer,
   * so the layout of a class is just a pointer
   */
  public static final GroupLayout $layout() {
      return $LAYOUT;
  }
  /** The in-memory layout of this type */
  public static final GroupLayout $instanceLayout() {
      return $CLASS_LAYOUT;
  }

      static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");
  static void traceDowncall(Object... args) {
      var ex = new RuntimeException();
      String traceArgs = Arrays.stream(args)
              .map(Object::toString)
              .collect(Collectors.joining(", "));
      System.out.printf("[java][%s:%d] Downcall: %s(%s)\n",
              ex.getStackTrace()[1].getFileName(),
              ex.getStackTrace()[1].getLineNumber(),
              ex.getStackTrace()[1].getMethodName(),
              traceArgs);
  }
  static void trace(Object... args) {
      var ex = new RuntimeException();
      String traceArgs = Arrays.stream(args)
              .map(Object::toString)
              .collect(Collectors.joining(", "));
      System.out.printf("[java][%s:%d] %s: %s\n",
              ex.getStackTrace()[1].getFileName(),
              ex.getStackTrace()[1].getLineNumber(),
              ex.getStackTrace()[1].getMethodName(),
              traceArgs);
  }

      // FIXME: this detecting is somewhat off
  public static final String TYPE_METADATA_NAME = "$s14JavaKitExample12MySwiftClassCN";
  static final MemorySegment TYPE_METADATA = SwiftKit.getTypeByMangledNameInEnvironment(TYPE_METADATA_NAME);

    
      // ==== --------------------------------------------------
  // init(len:cap)

      private static class init_len_cap {
        public static final FunctionDescriptor DESC =     FunctionDescriptor.of(
                /* -> */SWIFT_POINTER,
            SWIFT_INT,
            SWIFT_INT,
            SWIFT_POINTER
          );
            /**
     * Demangled representation:
     * {@snippet lang = Swift:
     * JavaKitExample.MySwiftClass.__allocating_init(len: Swift.Int, cap: Swift.Int) -> JavaKitExample.MySwiftClass
     * }
     */
    public static final MemorySegment ADDR = JavaKitExample.findOrThrow("$s14JavaKitExample12MySwiftClassC3len3capACSi_SitcfC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
      } // printClassInitializer(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:409
      /**
   * Create an instance of the {@code com.example.swift.generated.MySwiftClass} Swift class.
   *
   * {@snippet lang=Swift:
   * public init(len: Swift.Int, cap: Swift.Int)
   * }
   */
  public static MySwiftClass init(long len, long cap) {
    var mh$ = init_len_cap.HANDLE;
    try {
        if (TRACE_DOWNCALLS) {
          traceDowncall(len, cap);
        }
        var self = (MemorySegment) mh$.invokeExact(len, cap, TYPE_METADATA);
        return new MySwiftClass(self);
    } catch (Throwable ex$) {
        throw new AssertionError("should not reach here", ex$);
    }
  }

      // ==== --------------------------------------------------
  // voidMethod

      private static class voidMethod {
        public static final FunctionDescriptor DESC =     FunctionDescriptor.ofVoid(
          SWIFT_POINTER
          );
            /**
     * Demangled representation:
     * {@snippet lang = Swift:
     * JavaKitExample.MySwiftClass.voidMethod() -> ()
     * }
     */
    public static final MemorySegment ADDR = JavaKitExample.findOrThrow("$s14JavaKitExample12MySwiftClassC10voidMethodyyF");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
      } // printDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:444
      /**
   * Function descriptor for:
   * {@snippet lang=swift :
   * public func voidMethod()
   * }
   */
  public static FunctionDescriptor voidMethod$descriptor() {
      return voidMethod.DESC;
  }

      /**
   * Downcall method handle for:
   * {@snippet lang=swift :
   * public func voidMethod()
   * }
   */
  public static MethodHandle voidMethod$handle() {
      return voidMethod.HANDLE;
  }

      /**
   * Address for:
   * {@snippet lang=swift :
   * public func voidMethod()
   * }
   */
  public static MemorySegment voidMethod$address() {
      return voidMethod.ADDR;
  }

      /**
   * {@snippet lang=swift :
   * public func voidMethod()
   * }
   */
  public static void voidMethod(java.lang.foreign.MemorySegment self$) {
    var mh$ = voidMethod.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(self$);
      }
       mh$.invokeExact(self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * {@snippet lang=swift :
   * public func voidMethod()
   * }
   */
  public static void voidMethod(com.example.swift.generated.MySwiftClass self$) {
     voidMethod(self$);
  }

      // ==== --------------------------------------------------
  // takeIntMethod

      private static class takeIntMethod {
        public static final FunctionDescriptor DESC =     FunctionDescriptor.ofVoid(
          SWIFT_INT,
            SWIFT_POINTER
          );
            /**
     * Demangled representation:
     * {@snippet lang = Swift:
     * JavaKitExample.MySwiftClass.takeIntMethod(i: Swift.Int) -> ()
     * }
     */
    public static final MemorySegment ADDR = JavaKitExample.findOrThrow("$s14JavaKitExample12MySwiftClassC13takeIntMethod1iySi_tF");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
      } // printDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:444
      /**
   * Function descriptor for:
   * {@snippet lang=swift :
   * public func takeIntMethod(i: Swift.Int)
   * }
   */
  public static FunctionDescriptor takeIntMethod$descriptor() {
      return takeIntMethod.DESC;
  }

      /**
   * Downcall method handle for:
   * {@snippet lang=swift :
   * public func takeIntMethod(i: Swift.Int)
   * }
   */
  public static MethodHandle takeIntMethod$handle() {
      return takeIntMethod.HANDLE;
  }

      /**
   * Address for:
   * {@snippet lang=swift :
   * public func takeIntMethod(i: Swift.Int)
   * }
   */
  public static MemorySegment takeIntMethod$address() {
      return takeIntMethod.ADDR;
  }

      /**
   * {@snippet lang=swift :
   * public func takeIntMethod(i: Swift.Int)
   * }
   */
  public static void takeIntMethod(long i, java.lang.foreign.MemorySegment self$) {
    var mh$ = takeIntMethod.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(i, self$);
      }
       mh$.invokeExact(i, self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * {@snippet lang=swift :
   * public func takeIntMethod(i: Swift.Int)
   * }
   */
  public static void takeIntMethod(long i, com.example.swift.generated.MySwiftClass self$) {
     takeIntMethod(i, self$);
  }

      // ==== --------------------------------------------------
  // echoIntMethod

      private static class echoIntMethod {
        public static final FunctionDescriptor DESC =     FunctionDescriptor.of(
                /* -> */SWIFT_INT,
            SWIFT_INT,
            SWIFT_POINTER
          );
            /**
     * Demangled representation:
     * {@snippet lang = Swift:
     * JavaKitExample.MySwiftClass.echoIntMethod(i: Swift.Int) -> Swift.Int
     * }
     */
    public static final MemorySegment ADDR = JavaKitExample.findOrThrow("$s14JavaKitExample12MySwiftClassC13echoIntMethod1iS2i_tF");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
      } // printDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:444
      /**
   * Function descriptor for:
   * {@snippet lang=swift :
   * public func echoIntMethod(i: Swift.Int) -> Swift.Int
   * }
   */
  public static FunctionDescriptor echoIntMethod$descriptor() {
      return echoIntMethod.DESC;
  }

      /**
   * Downcall method handle for:
   * {@snippet lang=swift :
   * public func echoIntMethod(i: Swift.Int) -> Swift.Int
   * }
   */
  public static MethodHandle echoIntMethod$handle() {
      return echoIntMethod.HANDLE;
  }

      /**
   * Address for:
   * {@snippet lang=swift :
   * public func echoIntMethod(i: Swift.Int) -> Swift.Int
   * }
   */
  public static MemorySegment echoIntMethod$address() {
      return echoIntMethod.ADDR;
  }

      /**
   * {@snippet lang=swift :
   * public func echoIntMethod(i: Swift.Int) -> Swift.Int
   * }
   */
  public static long echoIntMethod(long i, java.lang.foreign.MemorySegment self$) {
    var mh$ = echoIntMethod.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(i, self$);
      }
      return (long) mh$.invokeExact(i, self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * {@snippet lang=swift :
   * public func echoIntMethod(i: Swift.Int) -> Swift.Int
   * }
   */
  public static long echoIntMethod(long i, com.example.swift.generated.MySwiftClass self$) {
    return (long) echoIntMethod(i, self$);
  }

      // ==== --------------------------------------------------
  // makeIntMethod

      private static class makeIntMethod {
        public static final FunctionDescriptor DESC =     FunctionDescriptor.of(
                /* -> */SWIFT_INT,
            SWIFT_POINTER
          );
            /**
     * Demangled representation:
     * {@snippet lang = Swift:
     * JavaKitExample.MySwiftClass.makeIntMethod() -> Swift.Int
     * }
     */
    public static final MemorySegment ADDR = JavaKitExample.findOrThrow("$s14JavaKitExample12MySwiftClassC13makeIntMethodSiyF");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
      } // printDowncallMethods(_:_:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:444
      /**
   * Function descriptor for:
   * {@snippet lang=swift :
   * public func makeIntMethod() -> Swift.Int
   * }
   */
  public static FunctionDescriptor makeIntMethod$descriptor() {
      return makeIntMethod.DESC;
  }

      /**
   * Downcall method handle for:
   * {@snippet lang=swift :
   * public func makeIntMethod() -> Swift.Int
   * }
   */
  public static MethodHandle makeIntMethod$handle() {
      return makeIntMethod.HANDLE;
  }

      /**
   * Address for:
   * {@snippet lang=swift :
   * public func makeIntMethod() -> Swift.Int
   * }
   */
  public static MemorySegment makeIntMethod$address() {
      return makeIntMethod.ADDR;
  }

      /**
   * {@snippet lang=swift :
   * public func makeIntMethod() -> Swift.Int
   * }
   */
  public static long makeIntMethod(java.lang.foreign.MemorySegment self$) {
    var mh$ = makeIntMethod.HANDLE;
    try {
      if (TRACE_DOWNCALLS) {
         traceDowncall(self$);
      }
      return (long) mh$.invokeExact(self$);
    } catch (Throwable ex$) {
      throw new AssertionError("should not reach here", ex$);
    }
  }

      /**
   * {@snippet lang=swift :
   * public func makeIntMethod() -> Swift.Int
   * }
   */
  public static long makeIntMethod(com.example.swift.generated.MySwiftClass self$) {
    return (long) makeIntMethod(self$);
  }

  } // printClass(_:_:body:) @ JExtractSwift/Swift2JavaTranslator+Printing.swift:168
